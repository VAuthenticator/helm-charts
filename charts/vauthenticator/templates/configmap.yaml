{{- if eq .Values.logging.enabled true }}
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: {{ .Release.Namespace }}
data:
  filebeat.yml: |-
    filebeat.config:
      modules:
        path: ${path.config}/modules.d/*.yml
        reload.enabled: true

    filebeat.inputs:
      - type: log
        multiline.pattern: '^java.|^[[:space:]]+(at|\.{3})\b|^Caused by:|^END:'
        multiline.negate: false
        multiline.match: after

        enabled: true
        paths:
          - /var/log/onlyone-portal/logs/*.log

    processors:
      - add_cloud_metadata: ~
      - add_docker_metadata: ~

    setup.kibana:
      host: "{{ .Values.logging.kibana.host }}"

    output.elasticsearch:
      hosts: ['{{ .Values.logging.elasticSearch.host }}']

{{ end }}


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: {{ .Release.Namespace }}
data:
  application.yml: |
    endSessionWithoutDiscovery: true
    oidcEndSessionUrl: {{ .Values.application.baseUrl }}/${server.servlet.context-path}/oidc/logout
    auth.oidcIss: {{ .Values.application.baseUrl }}/${server.servlet.context-path}
    logging.file.name: /var/log/onlyone-portal/logs/${spring.application.name}.log

    spring:
      main:
        lazy-initialization: true

      security:
        oauth2:
          resourceserver:
            jwt:
              jwk-set-uri: http://localhost:${server.port}${server.servlet.context-path}/oauth2/jwks

      redis:
        database: {{ .Values.application.redis.database }}
        host: {{ .Values.application.redis.host }}

      sleuth:
        redis:
          enabled: false

    server:
      port: {{ .Values.application.server.port }}
      forward-headers-strategy: framework
      servlet:
        context-path: {{ .Values.application.server.servlet.contextPath }}
      http2:
        enabled: true
      compression:
        enabled: true
        min-response-size: 1KB

    management:
      server:
        port: 8081
        servlet:
          context-path: /
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        shutdown:
          enabled: true
        health:
          show-details: ALWAYS

    vauthenticator:
      dynamo-db:
        account.table-name: {{ .Values.application.dynamoDb.account.tableName }}
        account.role.table-name: {{ .Values.application.dynamoDb.account.role.tableName }}
        role.table-name: {{ .Values.application.dynamoDb.role.tableName }}
        client-application.table-name: {{ .Values.application.dynamoDb.clientApplication.tableName }}
        keys.table-name: {{ .Values.application.dynamoDb.keys.tableName }}

      account-sync:
        listener:
          sleeping: {{ .Values.application.accountSync.listener.sleeping }}
          queueUrl: {{ .Values.application.accountSync.listener.queueUrl }}
          maxNumberOfMessages: {{ .Values.application.accountSync.listener.maxNumberOfMessages }}
          visibilityTimeout: {{ .Values.application.accountSync.listener.visibilityTimeout }}
          waitTimeSeconds: {{ .Values.application.accountSync.listener.waitTimeSeconds }}

    {{- if eq .Values.aws.iamUser.enabled true }}
    iamUserAwsCredentialsProvider: true
    {{ end }}

    {{- if eq .Values.aws.eks.serviceAccount.enabled true }}
    iamServiceAccountAwsCredentialsProvider: true
    {{ end }}

{{- if eq .Values.managementUi.enabled true }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: management-ui-config
  namespace: {{ .Release.Namespace }}
data:
  application.yml: |
    endSessionWithoutDiscovery: true
    oidcEndSessionUrl: {{ .Values.application.baseUrl }}/oidc/logout
    auth.oidcIss: {{ .Values.application.baseUrl }}
    logging.file.name: /var/log/onlyone-portal/logs/${spring.application.name}.log

    postLogoutRedirectUri: {{ .Values.managementUi.baseUrl }}/secure/admin/index

    spring:
      main:
        lazy-initialization: true

      security:
        oauth2:
          client:
            registration:
              client:
                client-id: vauthenticator-management-ui
                client-secret: secret
                client-name: VAuthenticator Management UI
                provider: vauthenticator
                scope:
                  - openid
                  - profile
                  - email
                redirect-uri: {{ .Values.managementUi.baseUrl }}/login/oauth2/code/client
                client-authentication-method: basic
                authorization-grant-type: authorization_code
            provider:
              vauthenticator:
                authorization-uri: {{ .Values.application.baseUrl }}/oauth2/authorize
                token-uri: {{ .Values.application.baseUrl }}/oauth2/token
                user-info-uri: {{ .Values.application.baseUrl }}/userinfo
                user-info-authentication-method: header
                jwk-set-uri: {{ .Values.application.baseUrl }}/oauth2/jwks
                user-name-attribute: email

      redis:
        database: {{ .Values.managementUi.redis.database }}
        host: {{ .Values.application.redis.host }}

      sleuth:
        redis:
          enabled: false

    server:
      port: {{ .Values.managementUi.server.port }}
      forward-headers-strategy: framework
      servlet:
        context-path: {{ .Values.managementUi.server.servlet.contextPath }}
      http2:
        enabled: true
      compression:
        enabled: true
        min-response-size: 1KB

    management:
      server:
        port: 8081
        servlet:
          context-path: /
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        shutdown:
          enabled: true
        health:
          show-details: ALWAYS

    vauthenticator:
      session-management:
        rp-iframe:
          logout-uri: ${server.servlet.context-path}/oidc_logout.html
      client:
        registrationId: client
      host: {{ .Values.application.baseUrl }}


    {{ end }}