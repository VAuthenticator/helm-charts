{{- if eq .Values.logging.enabled true }}
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: {{ .Release.Namespace }}
data:
  filebeat.yml: |-
    filebeat.config:
      modules:
        path: ${path.config}/modules.d/*.yml
        reload.enabled: true

    filebeat.inputs:
      - type: log
        multiline.pattern: '^java.|^[[:space:]]+(at|\.{3})\b|^Caused by:|^END:'
        multiline.negate: false
        multiline.match: after

        enabled: true
        paths:
          - /var/log/onlyone-portal/logs/*.log

    processors:
      - add_cloud_metadata: ~
      - add_docker_metadata: ~

    setup.kibana:
      host: "{{ .Values.logging.kibana.host }}"

    output.elasticsearch:
      hosts: ['{{ .Values.logging.elasticSearch.host }}']

{{ end }}


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: {{ .Release.Namespace }}
data:
  application.yml: |
    key:
      master-key: {{ .Values.application.masterKey }}
    endSessionWithoutDiscovery: true
    oidcEndSessionUrl: {{ .Values.application.baseUrl }}/oidc/logout
    auth.oidcIss: {{ .Values.application.baseUrl }}
    logging.file.name: /var/log/onlyone-portal/logs/${spring.application.name}.log

    assetServer:
      baseUrl: {{ .Values.application.assetServer.baseUrl }}

    features:
      mail-sender-enabled: {{ .Values.application.mailProvider.enabled }}

    document:
      bucket-name: {{ .Values.application.documentRepository.bucketName }}

    {{- if eq .Values.application.mailProvider.enabled true }}
    no-reply:
      mail:
        from: {{ .Values.application.mail.from }}
        welcomeMailSubject: {{ .Values.application.mail.welcomeMailSubject }}
        verificationMailSubject: {{ .Values.application.mail.verificationMailSubject }}
        resetPasswordMailSubject: {{ .Values.application.mail.resetPasswordMailSubject }}
        mfaMailSubject: {{ .Values.application.mail.mfaMailSubject }}
  {{- end }}

    mfa:
      otp:
        otpLength: {{ .Values.application.mfa.otp.otpLength }}
        otpTimeToLiveInSeconds: {{ .Values.application.mfa.otp.otpTimeToLiveInSeconds }}

    spring:
      main:
        lazy-initialization: true
    {{- if eq .Values.application.mailProvider.enabled true }}
      mail:
        host: {{ .Values.application.mailProvider.host }}
        port: {{ .Values.application.mailProvider.port }}
        username: {{ .Values.application.mailProvider.username }}
        password: {{ .Values.application.mailProvider.password }}
        properties:
        {{- toYaml .Values.application.mailProvider.properties | nindent 10 }}

    {{- end }}

      security:
        oauth2:
          resourceserver:
            jwt:
              jwk-set-uri: http://localhost:${server.port}/oauth2/jwks
      data:
        redis:
          database: {{ .Values.application.redis.database }}
          host: {{ .Values.application.redis.host }}

    server:
      port: {{ .Values.application.server.port }}
      forward-headers-strategy: framework
      servlet:
        context-path: /
      http2:
        enabled: true
      compression:
        enabled: true
        min-response-size: 1KB

    management:
      server:
        port: 8081
        servlet:
          context-path: /
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        shutdown:
          enabled: true
        health:
          show-details: ALWAYS

    vauthenticator:
      dynamo-db:
        account.table-name: {{ .Values.application.dynamoDb.account.tableName }}
        account.role.table-name: {{ .Values.application.dynamoDb.account.role.tableName }}
        role.table-name: {{ .Values.application.dynamoDb.role.tableName }}
        client-application.table-name: {{ .Values.application.dynamoDb.clientApplication.tableName }}
        mfa-account-methods.table-name: {{ .Values.application.dynamoDb.mfaAccountMethods.tableName  }}
        keys.table-name: {{ .Values.application.dynamoDb.keys.tableName }}
        keys.mfa.table-name: {{ .Values.application.dynamoDb.keys.mfa.tableName }}
        keys.signature.table-name: {{ .Values.application.dynamoDb.keys.signature.tableName }}
        ticket.table-name:  {{ .Values.application.dynamoDb.ticket.tableName }}
      host: {{ .Values.application.baseUrl }}
    {{- if eq .Values.aws.iamUser.enabled true }}
    iamUserAwsCredentialsProvider: true
    {{ end }}

    {{- if eq .Values.aws.eks.serviceAccount.enabled true }}
    iamServiceAccountAwsCredentialsProvider: true
    {{ end }}

{{- if eq .Values.managementUi.enabled true }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: management-ui-config
  namespace: {{ .Release.Namespace }}
data:
  application.yml: |
    endSessionWithoutDiscovery: true
    oidcEndSessionUrl: {{ .Values.application.baseUrl }}/oidc/logout
    auth.oidcIss: {{ .Values.application.baseUrl }}
    logging.file.name: /var/log/onlyone-portal/logs/${spring.application.name}.log

    postLogoutRedirectUri: {{ .Values.managementUi.baseUrl }}/secure/admin/index

    spring:
      main:
        lazy-initialization: true

      security:
        oauth2:
          client:
            registration:
              client:
                client-id: {{ .Values.managementUi.sso.clientApp.clientId }}
                client-secret: {{ .Values.managementUi.sso.clientApp.clientSecret }}
                client-name: VAuthenticator Management UI
                provider: vauthenticator
                scope:
                  - openid
                  - profile
                  - email
                redirect-uri: {{ .Values.managementUi.baseUrl }}/login/oauth2/code/client
                authorization-grant-type: authorization_code
            provider:
              vauthenticator:
                authorization-uri: {{ .Values.application.baseUrl }}/oauth2/authorize
                token-uri: {{ .Values.application.backChannelBaseUrl }}/oauth2/token
                user-info-uri: {{ .Values.application.backChannelBaseUrl }}/userinfo
                jwk-set-uri: {{ .Values.application.backChannelBaseUrl }}/oauth2/jwks
                user-name-attribute: email
      data:
        redis:
          database: {{ .Values.managementUi.redis.database }}
          host: {{ .Values.application.redis.host }}

    server:
      port: {{ .Values.managementUi.server.port }}
      forward-headers-strategy: framework
      servlet:
        context-path: /
      http2:
        enabled: true
      compression:
        enabled: true
        min-response-size: 1KB

    management:
      server:
        port: 8081
        servlet:
          context-path: /
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        shutdown:
          enabled: true
        health:
          show-details: ALWAYS

    vauthenticator:
      session-management:
        enabled: true
        rp-iframe:
          host: {{ .Values.managementUi.baseUrl }}
          polling-rate: 5s
          origin: ${vauthenticator.host}
          logout-uri: /logout
      client:
        registrationId: client
      host: {{ .Values.application.baseUrl }}
      backChannelHost: {{ .Values.application.backChannelBaseUrl }}


    {{ end }}